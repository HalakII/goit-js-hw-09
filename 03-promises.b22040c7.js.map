{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAoCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA3CQQ,SAASC,cAAc,SAG/BC,iBAAiB,UAExB,SAAyBC,GACvBA,EAAMC,iBAEN,IAAgCC,EAAAF,EAAMG,cAAcC,SAA5CC,EAAwBH,EAAxBb,MAAOiB,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAEfC,EAAYC,OAAOJ,EAAMK,OACzBC,EAAWF,OAAOH,EAAKI,OACvBE,EAAaH,OAAOF,EAAOG,OACjC,GAAIF,EAAY,GAAKG,EAAW,GAAKC,EAAa,EAChDC,EAAA5B,GAAS6B,OAAOC,QAAS,yCAEvB,IAAG,IAAIC,EAAI,EAAGA,GAAKJ,EAAYI,GAAK,EAAG,CAGvC7B,EAAc6B,EAFCR,EAAYG,GAAYK,EAAI,IAGxCC,MAAK,SAAAC,G,IAAG9B,EAAQ8B,EAAR9B,SAAUC,EAAK6B,EAAL7B,MACjBwB,EAAA5B,GAAS6B,OAAOK,QACd,uBAAwCC,OAAfhC,EAAS,QAAYgC,OAAN/B,EAAM,M,IAGjDgC,OAAM,SAAAH,G,IAAG9B,EAAQ8B,EAAR9B,SAAUC,EAAK6B,EAAL7B,MAClBwB,EAAA5B,GAAS6B,OAAOQ,QACd,sBAAqCF,OAAfhC,EAAS,QAAYgC,OAAN/B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\n// console.dir(formEl[0]);\n\nformEl.addEventListener('submit', onPromiseCreate);\n\nfunction onPromiseCreate(event) {\n  event.preventDefault();\n\n  const { delay, step, amount } = event.currentTarget.elements;\n\n  const dataDelay = Number(delay.value);\n  const dataStep = Number(step.value);\n  const dataAmount = Number(amount.value);\n  if (dataDelay < 0 || dataStep < 0 || dataAmount < 0) {\n    Notiflix.Notify.warning(`❗ Please enter a positive number`);\n  } else {\n    for (let i = 1; i <= dataAmount; i += 1) {\n      let delaySum = dataDelay + dataStep * (i - 1);\n\n      createPromise(i, delaySum)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n    }\n  }\n  // event.currentTarget.reset();\n}\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","step","amount","dataDelay","Number","value","dataStep","dataAmount","$parcel$interopDefault","Notify","warning","i","then","param","success","concat","catch","failure"],"version":3,"file":"03-promises.b22040c7.js.map"}